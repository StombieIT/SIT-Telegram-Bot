from config import *
@bot.message_handler(commands=["start"])
def start(message):
	bot.reply_to(message,
		'–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π\
		–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/" –≤ –ø–æ–ª–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ,\
		—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.',
	reply_markup=keyboard_main)
@bot.message_handler(commands=["password"])
def password(message):
	bot.reply_to(message, "–£–∫–∞–∂–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 128.")
	bot.register_next_step_handler(message, password_generate)
def password_generate(message):
	if str(type(message.text)) == "<class 'str'>":
		password = ""
		try:
			int(message.text)
		except ValueError:
			bot.reply_to(message, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã üôà.")
		else:
			if int(message.text) > 0:
				if int(message.text) <= 128:
					for i in range(int(message.text)):
						if (i % 5 == 0) and (i != 0):
							password += choice(list("!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~"))
						elif i % 2 == 0:
							password += choice(list("qwrtpsdfghjklzxcvbnmQWRTPSDFGHJKLZXCVBNM"))
						elif i % 3 == 0:
							password += choice(list("0123456789"))
						else:
							password += choice(list("eyuioaEYUIOA"))
					bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ:")
					bot.send_message(message.chat.id, password)
				else:
					bot.reply_to(message, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üôà.')
			else:
				bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üôà.")
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
@bot.message_handler(commands=['weather'])
def weather(message):
	bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç.')
	bot.register_next_step_handler(message, weather_choose_city)
def weather_choose_city(message):
	if str(type(message.text)) == "<class 'str'>":
		city = message.text
		try:
			observation = owm.weather_at_place(city)
		except pyowm.exceptions.api_response_error.NotFoundError:
			bot.reply_to(message, '–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞—Å–µ–ª—ë–Ω–Ω—ã–π –ø—É–Ω–∫—Ç üôà.')
		else:
			weather = observation.get_weather()
			status = weather.get_status()
			temperature = weather.get_temperature('celsius')['temp']
			wind = weather.get_wind('meters_sec')['speed']
			humidity = weather.get_humidity()
			if status == 'Clouds':
				status = '–æ–±–ª–∞—á–Ω–æ'
			elif status == 'Clear':
				status = '—è—Å–Ω–æ'
			elif status == 'Rain':
				status = '–∏–¥—ë—Ç –¥–æ–∂–¥—å'
			elif status == 'Snow':
				status = '–∏–¥—ë—Ç —Å–Ω–µ–≥'
			bot.send_message(message.chat.id,
				'–ü–æ–≥–æ–¥–∞ –≤ {c}:\
				\n–°–µ–π—á–∞—Å {s}.\
				\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {t} ¬∞C.\
				\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {w} –º/—Å.\
				\n–í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {h} %.'.format(c=city, s=status, t=temperature, w=wind, h=humidity)
			)
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
@bot.message_handler(commands=['qr'])
def qr(message):
	bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.', reply_markup=keyboard_qr)
	bot.register_next_step_handler(message, qr_choice)
def qr_choice(message):
	if str(type(message.text)) == "<class 'str'>":
		if message.text == '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å':
			bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –Ω–µ –±–æ–ª–µ–µ 256 —Å–∏–º–≤–æ–ª–æ–≤.')
			bot.register_next_step_handler(message, qr_generate)
		elif message.text == '–°—á–∏—Ç–∞—Ç—å':
			bot.send_message(message.chat.id, '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å QR –∫–æ–¥–æ–º.')
			bot.register_next_step_handler(message, qr_read)
		else:
			bot.reply_to(message, '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ üôà.')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
def qr_generate(message):
	if str(type(message.text)) == "<class 'str'>":
		if len(message.text) <= 256:
			image = make(message.text)
			image.save('qr_generate.png')
			byte = open('qr_generate.png', 'rb')
			bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ:')
			bot.send_photo(message.chat.id, byte)
			byte.close()
			remove('qr_generate.png')
		else:
			bot.reply_to(message, '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ üôà.')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
def qr_read(message):
	if str(type(message.photo)) == "<class 'list'>":
		info = bot.get_file(message.photo[len(message.photo) - 1].file_id)
		byte = bot.download_file(info.file_path)
		with open('qr_read.png', 'wb') as image:
			image.write(byte)
		image = imread('qr_read.png')
		barcodes = decode(image)
		for barcode in barcodes:
			barcodeData = barcode.data.decode('utf-8')
		try:
			type(barcodeData)
		except UnboundLocalError:
			bot.reply_to(message, '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR –∫–æ–¥ üôà.')
		else:
			bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ:')
			bot.send_message(message.chat.id, barcodeData)
		remove('qr_read.png')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
@bot.message_handler(commands=['calculate'])
def calculate(message):
	bot.reply_to(message,
		'–£–∫–∞–∂–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã:\
		\n{ - } - —Ä–∞–∑–Ω–∏—Ü–∞,\
		\n{ + } - —Å—É–º–º–∞,\
		\n{ * } - –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ,\
		\n{ / } - —á–∞—Å—Ç–Ω–æ–µ,\
		\n{ // } - —á–∞—Å—Ç–Ω–æ–µ –±–µ–∑ –æ—Å—Ç–∞—Ç–∫–∞,\
		\n{ % } - –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç —á–∞—Å—Ç–Ω–æ–≥–æ,\
		\n{ ** } - –≤–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å,\
		\n{ () } - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π.'
	)
	bot.register_next_step_handler(message, calculate_count)
def calculate_count(message):
	if str(type(message.text)) == "<class 'str'>":
		try:
			result = eval(message.text)
		except NameError:
			bot.reply_to(message, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã üôà.")
		except SyntaxError:
			bot.reply_to(message, "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã üôà.")
		else:
			bot.send_message(message.chat.id, '–ì–æ—Ç–æ–≤–æ:')
			bot.send_message(message.chat.id, result)
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
@bot.message_handler(commands=['do'])
def do(message):
	if message.chat.id in ADMIN:
		bot.reply_to(message, '–£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
		bot.register_next_step_handler(message, do_exec)
	else:
		bot.send_message(message.chat.id,
		'–ù–µ –ø–æ–Ω—è–ª üòï. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π\
		–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/" –≤ –ø–æ–ª–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ,\
		—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.'
		)
def do_exec(message):
	if str(type(message.text)) == "<class 'str'>":
		try:
			exec(message.text)
		except SyntaxError:
			bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ üôà.')
		except NameError:
			bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ üôà.')
		else:
			bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω–æ.')
	else:
		bot.reply_to(message, '–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è üôà.')
@bot.message_handler(content_types=["text"])
def main(message):
	bot.send_message(message.chat.id,
		'–ù–µ –ø–æ–Ω—è–ª üòï. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω–æ–π –Ω–∏–∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π\
		–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ "/" –≤ –ø–æ–ª–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–æ–≥–æ,\
		—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.'
		)
if __name__ == '__main__':
	bot.polling()
